Mon Jun  5 03:44:12 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
19550 warnings generated.
40320 warnings generated.
58698 warnings generated.
77552 warnings generated.
97129 warnings generated.
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:12:16: error: 2 adjacent parameters of 'Course' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Course::Course(const string &courseID, const string &courseName)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:12:30: note: the first parameter in the range is 'courseID'
Course::Course(const string &courseID, const string &courseName)
                             ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:12:54: note: the last parameter in the range is 'courseName'
Course::Course(const string &courseID, const string &courseName)
                                                     ^~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:33:3: error: replace loop by 'std::any_of()' [readability-use-anyofallof,-warnings-as-errors]
  for (University *val : universties) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:17:39: error: 2 adjacent parameters of 'Student' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Student::Student(const int &idNumber, const string &lastname,
                                      ^~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:17:53: note: the first parameter in the range is 'lastname'
Student::Student(const int &idNumber, const string &lastname,
                                                    ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:18:32: note: the last parameter in the range is 'firstname'
                 const string &firstname)
                               ^~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:72:12: error: redundant string initialization [readability-redundant-string-init,-warnings-as-errors]
    string longName = "";
           ^~~~~~~~~~~~~
           longName
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:210:12: error: static member accessed through instance [readability-static-accessed-through-instance,-warnings-as-errors]
  answer = val->cmpLastName(stu1, stu2);
           ^~~~~
           Course::
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:218:12: error: static member accessed through instance [readability-static-accessed-through-instance,-warnings-as-errors]
  answer = val->cmpID(stu1, stu2);
           ^~~~~
           Course::
Suppressed 97123 warnings (97123 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
6 warnings treated as errors
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./course.cpp
Running clang-format on ./enrollmentsystem.cpp
Running clang-format on ./main.cpp
Running clang-format on ./student.cpp
Running clang-format on ./university.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================

=================================================================
==9119==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 16440 byte(s) in 137 object(s) allocated from:
    #0 0x7f9128bc37b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x411a3d in Student::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:42
    #2 0x4196ae in University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:111
    #3 0x40d210 in EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:75
    #4 0x40fe40 in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:22
    #5 0x4111ea in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:47
    #6 0x7f9127e17d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

SUMMARY: AddressSanitizer: 16440 byte(s) leaked in 137 allocation(s).
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==9158== Memcheck, a memory error detector
==9158== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==9158== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==9158== Command: ./a.out
==9158== Parent PID: 8899
==9158== 
==9158== 
==9158== HEAP SUMMARY:
==9158==     in use at exit: 16,440 bytes in 137 blocks
==9158==   total heap usage: 167,378 allocs, 167,241 frees, 10,959,052 bytes allocated
==9158== 
==9158== LEAK SUMMARY:
==9158==    definitely lost: 16,440 bytes in 137 blocks
==9158==    indirectly lost: 0 bytes in 0 blocks
==9158==      possibly lost: 0 bytes in 0 blocks
==9158==    still reachable: 0 bytes in 0 blocks
==9158==         suppressed: 0 bytes in 0 blocks
==9158== Rerun with --leak-check=full to see details of leaked memory
==9158== 
==9158== For lists of detected and suppressed errors, rerun with: -s
==9158== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                 1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::addStudent(Student*)                                                                                                                                                                           1       1   0.00%         4       4   0.00%         0       0   0.00%
Course::removeStudent(Student*)                                                                                                                                                                        1       1   0.00%         4       4   0.00%         0       0   0.00%
Course::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                 4       0 100.00%        22       0 100.00%         2       0 100.00%
Course::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                       4       0 100.00%        21       0 100.00%         2       0 100.00%
Course::cmpLastName(Student const*, Student const*)                                                                                                                                                    1       0 100.00%         3       0 100.00%         0       0   0.00%
Course::cmpID(Student const*, Student const*)                                                                                                                                                          1       0 100.00%         3       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                 14       2  85.71%        59       8  86.44%         4       0 100.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EnrollmentSystem::~EnrollmentSystem()                                                                                                                                                                  2       0 100.00%         5       0 100.00%         2       0 100.00%
EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                5       0 100.00%         9       0 100.00%         4       0 100.00%
EnrollmentSystem::setCurrentUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                         5       0 100.00%         9       0 100.00%         4       0 100.00%
EnrollmentSystem::getUniversityName[abi:cxx11]() const                                                                                                                                                 1       0 100.00%         3       0 100.00%         0       0   0.00%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int)                                                                                                                                                   1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                              1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                           1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                              1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                        1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                       1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                             1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                 23       0 100.00%        76       0 100.00%        10       0 100.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test1()                                                                                                                                                                                                1       0 100.00%        31      18  41.94%         0       0   0.00%
main                                                                                                                                                                                                   1       0 100.00%         4       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                  2       0 100.00%        35      18  48.57%         0       0   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, Student const&)                                                                                                                                                                            1       1   0.00%         5       5   0.00%         0       0   0.00%
Student::Student(int const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                     6       6   0.00%        13      13   0.00%         4       4   0.00%
Student::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                      8       0 100.00%         8       0 100.00%         6       0 100.00%
Student::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                               7       0 100.00%        11       0 100.00%         6       0 100.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               23       7  69.57%        38      18  52.63%        16       4  75.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
University::University(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
University::~University()                                                                                                                                                                                            5       0 100.00%        13       0 100.00%         8       0 100.00%
University::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                  8       1  87.50%        21       3  85.71%         6       1  83.33%
University::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   8       1  87.50%        25       3  88.00%         6       1  83.33%
University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                              12       1  91.67%        26       3  88.46%        12       1  91.67%
University::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                 10       0 100.00%        18       0 100.00%         8       1  87.50%
University::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   7       0 100.00%        14       0 100.00%         8       0 100.00%
University::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                            5       1  80.00%         8       1  87.50%         4       1  75.00%
University::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                                                 5       0 100.00%        14       0 100.00%         4       0 100.00%
University::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                           2       0 100.00%         7       0 100.00%         2       0 100.00%
University::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                 2       0 100.00%         7       0 100.00%         2       0 100.00%
University::cmpLastName(Student const*, Student const*)                                                                                                                                                              1       1   0.00%         6       6   0.00%         0       0   0.00%
University::cmpID(Student const*, Student const*)                                                                                                                                                                    1       1   0.00%         6       6   0.00%         0       0   0.00%
University::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   4       0 100.00%         9       0 100.00%         4       0 100.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               71       6  91.55%       175      22  87.43%        64       5  92.19%
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:
    1|       |#include "course.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <iostream>
    6|       |#include <sstream>
    7|       |
    8|       |using namespace std;
    9|       |
   10|  61.1k|Course::Course(const string &courseID) : courseID(courseID) {}
   11|       |
   12|       |Course::Course(const string &courseID, const string &courseName)
   13|     79|    : courseID(courseID), courseName(courseName) {}
   14|       |
   15|      0|void Course::addStudent(Student *student) {
   16|      0|  Student *answer = students[courseID][0];
   17|      0|  answer->addCourse(student->studentID, courseID);
   18|      0|}
   19|       |
   20|      0|void Course::removeStudent(Student *student) {
   21|      0|  Student *answer = students[courseID][0];
   22|      0|  answer->dropCourse(student->studentID, courseID);
   23|      0|}
   24|       |
   25|     79|string Course::getClassListByLastName(const string &courseNumber) {
   26|     79|  string ans = "[";
   27|       |
   28|     79|  sort(students[courseNumber].begin(), students[courseNumber].end(),
   29|     79|       cmpLastName);
   30|     79|  ans += students[courseNumber][0]->studentLastName;
   31|     79|  ans += ", ";
   32|     79|  ans += students[courseNumber][0]->studentfirstName;
   33|     79|  ans += " (";
   34|     79|  ans += to_string(students[courseNumber][0]->studentID);
   35|     79|  ans += ")";
   36|       |
   37|    553|  for (int i = 1; i < students[courseNumber].size(); i++) {
   38|    474|    ans += ", ";
   39|    474|    ans += students[courseNumber][i]->studentLastName;
   40|    474|    ans += ", ";
   41|    474|    ans += students[courseNumber][i]->studentfirstName;
   42|    474|    ans += " (";
   43|    474|    ans += to_string(students[courseNumber][i]->studentID);
   44|    474|    ans += ")";
   45|    474|  }
   46|     79|  ans += "]";
   47|     79|  return ans;
   48|     79|}
   49|       |
   50|       |// Return class list sorted by id of students
   51|     79|string Course::getClassListByID(const string &courseNumber) {
   52|     79|  string ans = "[";
   53|       |
   54|     79|  sort(students[courseNumber].begin(), students[courseNumber].end(), cmpID);
   55|     79|  ans += students[courseNumber][0]->studentLastName;
   56|     79|  ans += ", ";
   57|     79|  ans += students[courseNumber][0]->studentfirstName;
   58|     79|  ans += " (";
   59|     79|  ans += to_string(students[courseNumber][0]->studentID);
   60|     79|  ans += ")";
   61|       |
   62|    553|  for (int i = 1; i < students[courseNumber].size(); i++) {
   63|    474|    ans += ", ";
   64|    474|    ans += students[courseNumber][i]->studentLastName;
   65|    474|    ans += ", ";
   66|    474|    ans += students[courseNumber][i]->studentfirstName;
   67|    474|    ans += " (";
   68|    474|    ans += to_string(students[courseNumber][i]->studentID);
   69|    474|    ans += ")";
   70|    474|  }
   71|     79|  ans += "]";
   72|     79|  return ans;
   73|     79|}
   74|       |
   75|    869|bool Course::cmpLastName(const Student *stu1, const Student *stu2) {
   76|    869|  return stu1->studentLastName < stu2->studentLastName;
   77|    869|}
   78|       |
   79|  1.65k|bool Course::cmpID(const Student *stu1, const Student *stu2) {
   80|  1.65k|  return stu1->studentID < stu2->studentID;
   81|  1.65k|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include "university.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <fstream>
    7|       |#include <iostream>
    8|       |#include <map>
    9|       |#include <sstream>
   10|       |#include <vector>
   11|       |
   12|       |using namespace std;
   13|       |/*Destructor*/
   14|      1|EnrollmentSystem::~EnrollmentSystem() {
   15|      3|  for (University *university : universties) {
   16|      3|    delete university;
   17|      3|  }
   18|      1|}
   19|       |
   20|       |/*Add university to the enrollments system*/
   21|      4|bool EnrollmentSystem::addUniversity(const string &name) {
   22|      4|  for (University *val : universties) {
   23|      4|    if (val->universityName == name) {
   24|      1|      return false;
   25|      1|    }
   26|      4|  }
   27|      3|  universties.push_back(new University(name));
   28|      3|  return true;
   29|      4|}
   30|       |
   31|       |/*Set this university as the active university for other functions*/
   32|      2|bool EnrollmentSystem::setCurrentUniversity(const string &name) {
   33|      4|  for (University *val : universties) {
   34|      4|    if (val->universityName == name) {
   35|      1|      currentUniversity = val;
   36|      1|      return true;
   37|      1|    }
   38|      4|  }
   39|      1|  return false;
   40|      2|}
   41|       |
   42|       |/*Return the current active university name*/
   43|      1|string EnrollmentSystem::getUniversityName() const {
   44|      1|  return currentUniversity->universityName;
   45|      1|}
   46|       |
   47|       |/*Return the courses student is enrolled in
   48|       | The returned courses are separated by commas and sorted by course name*/
   49|      1|string EnrollmentSystem::getEnrolledCourses(int studentID) {
   50|      1|  University *answer = universties[0];
   51|      1|  string value = answer->getEnrolledCourses(studentID);
   52|      1|  return value;
   53|      1|}
   54|       |
   55|       |/* Read the student list for current active university
   56|       |return true if file successfully read*/
   57|      1|bool EnrollmentSystem::readStudentList(const string &filename) {
   58|      1|  University *answer = universties[0];
   59|      1|  bool value = answer->readStudentList(filename);
   60|      1|  return value;
   61|      1|}
   62|       |
   63|       |/* Read the course list for current active university
   64|       | return true if file successfully read*/
   65|      1|bool EnrollmentSystem::readCourseList(const string &filename) {
   66|      1|  University *answer = universties[0];
   67|      1|  bool value = answer->readCourseList(filename);
   68|      1|  return value;
   69|      1|}
   70|       |
   71|       |/* Read the student enrollment information for current active university
   72|       | return true if file successfully read*/
   73|      1|bool EnrollmentSystem::readEnrollmentInfo(const string &filename) {
   74|      1|  University *answer = universties[0];
   75|      1|  bool value = answer->readEnrollmentInfo(filename);
   76|      1|  return value;
   77|      1|}
   78|       |
   79|       |/*Drop student from given course, return true if successful*/
   80|      1|bool EnrollmentSystem::dropCourse(int studentID, const string &courseNumber) {
   81|      1|  University *answer = universties[0];
   82|      1|  bool value = answer->dropCourse(studentID, courseNumber);
   83|      1|  return value;
   84|      1|}
   85|       |/*This is used to add a student to a course*/
   86|      3|bool EnrollmentSystem::addCourse(int studentID, const string &courseNumber) {
   87|      3|  University *answer = universties[0];
   88|      3|  bool value = answer->addCourse(studentID, courseNumber);
   89|      3|  return value;
   90|      3|}
   91|       |/*Return true if student is in the given course*/
   92|       |bool EnrollmentSystem::isInCourse(int studentID,
   93|      1|                                  const string &courseNumber) const {
   94|      1|  University *answer = universties[0];
   95|      1|  bool value = answer->isInCourse(studentID, courseNumber);
   96|      1|  return value;
   97|      1|}
   98|       |/*return class of students sorted by thier lastname*/
   99|      1|string EnrollmentSystem::getClassListByLastName(const string &courseNumber) {
  100|      1|  University *answer = universties[0];
  101|      1|  string value = answer->getClassListByLastName(courseNumber);
  102|      1|  return value;
  103|      1|}
  104|       |
  105|       |/*return class of students sorted by thier ID*/
  106|      1|string EnrollmentSystem::getClassListByID(const string &courseNumber) {
  107|      1|  University *answer = universties[0];
  108|      1|  string value = answer->getClassListByID(courseNumber);
  109|      1|  return value;
  110|      1|}
  111|       |
  112|       |/*Return the title for the course*/
  113|      1|string EnrollmentSystem::getCourseTitle(const string &courseNumber) {
  114|      1|  University *answer = universties[0];
  115|      1|  string value = answer->getCourseTitle(courseNumber);
  116|      1|  return value;
  117|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:
    1|       |
    2|       |#include "enrollmentsystem.h"
    3|       |#include <cassert>
    4|       |#include <iostream>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// check enrollment system
   10|      1|void test1() {
   11|      1|  EnrollmentSystem eas;
   12|      1|  assert(eas.addUniversity("UWB"));
   13|      0|  assert(!eas.addUniversity("UWB"));
   14|      0|  assert(eas.addUniversity("UW Seattle"));
   15|      0|  assert(eas.addUniversity("UW Tacoma"));
   16|      0|  assert(!eas.setCurrentUniversity("UWx"));
   17|      0|  assert(eas.setCurrentUniversity("UWB"));
   18|      0|  assert(eas.getUniversityName() == "UWB");
   19|       |  // // read data
   20|      0|  assert(eas.readCourseList("data-courses.txt"));
   21|      0|  assert(eas.readStudentList("data-students.txt"));
   22|      0|  assert(eas.readEnrollmentInfo("data-enrollments.txt"));
   23|       |  // // check courses
   24|      0|  assert(!eas.addCourse(999, "CSS342"));
   25|      0|  assert(!eas.addCourse(1070, "CSS3422"));
   26|      0|  assert(!eas.isInCourse(1070, "CSS342"));
   27|      0|  assert(eas.addCourse(1070, "CSS342"));
   28|      0|  assert(eas.dropCourse(1070, "CSS343"));
   29|      0|  assert(eas.getCourseTitle("CSS342") ==
   30|      1|         "Data Structures, Algorithms, and Discrete Mathematics I");
   31|       |  // // check enrollments
   32|      0|  assert(eas.getEnrolledCourses(1070) == "[CSS110, CSS173, CSS342]");
   33|      0|  string c342byLastName =
   34|      1|      "[Collins, Cassandra (1070), Evans, Juan (1401), Gonzalez, Holly (1223), "
   35|      1|      "Henderson, Daniel (1364), Taylor, Alexander (1986), Thompson, Christine "
   36|      1|      "(1386), Watson, Alex (1211)]";
   37|      1|  assert(eas.getClassListByLastName("CSS342") == c342byLastName);
   38|      0|  string c342byID =
   39|      1|      "[Collins, Cassandra (1070), Watson, Alex (1211), Gonzalez, Holly "
   40|      1|      "(1223), Henderson, Daniel (1364), Thompson, Christine (1386), Evans, "
   41|      1|      "Juan (1401), Taylor, Alexander (1986)]";
   42|      1|  assert(eas.getClassListByID("CSS342") == c342byID);
   43|      1|}
   44|       |
   45|       |// run all tests
   46|      1|int main() {
   47|      1|  test1();
   48|       |
   49|      1|  cout << "Done." << endl;
   50|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:
    1|       |#include "student.h"
    2|       |#include "course.h"
    3|       |#include <iostream>
    4|       |#include <memory>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// this function is used to print student
   10|      0|ostream &operator<<(ostream &out, const Student &student) {
   11|      0|  out << student.studentLastName << ", " << student.studentfirstName << " ("
   12|      0|      << student.studentID << ")";
   13|      0|  return out;
   14|      0|}
   15|       |
   16|       |// constructor
   17|       |Student::Student(const int &idNumber, const string &lastname,
   18|       |                 const string &firstname)
   19|       |    : studentLastName(lastname), studentfirstName(firstname),
   20|    137|      studentID(idNumber) {}
   21|       |// this function is used to remove a student from a course
   22|      0|bool Student::dropCourse(int studentID, const string &courseNumber) {
   23|      0|  bool ans = false;
   24|      0|  vector<Course *> &courses = enrollmentInfo[studentID];
   25|      0|  for (int i = 0; i < courses.size(); i++) {
   26|      0|    if (courses[i]->courseID == courseNumber) {
   27|      0|      delete courses[i]; // Deallocate memory for the Course object
   28|      0|      courses.erase(courses.begin() + i);
   29|      0|      ans = true;
   30|      0|      break;
   31|      0|    }
   32|      0|  }
   33|      0|  return ans;
   34|      0|}
   35|       |// this function is used to add a student to a course
   36|  62.0k|bool Student::addCourse(int studentID, const string &courseNumber) {
   37|  62.0k|  if (Student::isInCourse(studentID, courseNumber) ||
   38|  62.0k|      ((studentID / 1000) == 0) || (courseNumber.length() != 6)) {
   39|    959|    return false;
   40|    959|  }
   41|       |
   42|  61.1k|  enrollmentInfo[studentID].push_back(new Course(courseNumber));
   43|       |
   44|  61.1k|  return true;
   45|  62.0k|}
   46|       |
   47|       |// Return true if student is in the given course
   48|  62.0k|bool Student::isInCourse(int studentID, const string &courseNumber) const {
   49|  62.0k|  const auto &enrolledCourses = enrollmentInfo.find(studentID);
   50|  62.0k|  if (enrolledCourses != enrollmentInfo.end()) {
   51|  77.4k|    for (const auto &course : enrolledCourses->second) {
   52|  77.4k|      if (course->courseID == courseNumber) {
   53|    685|        return true;
   54|    685|      }
   55|  77.4k|    }
   56|  43.0k|  }
   57|  61.3k|  return false;
   58|  62.0k|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:
    1|       |#include "university.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <fstream>
    6|       |#include <iostream>
    7|       |#include <sstream>
    8|       |
    9|       |using namespace std;
   10|       |
   11|       |/*constructor*/
   12|      3|University::University(const string &name) : universityName(name) {}
   13|       |
   14|       |/*Destructor*/
   15|      3|University::~University() {
   16|    137|  for (const auto &pair : uniStudents) {
   17|  18.9k|    for (auto &enrollment : pair.second->enrollmentInfo) {
   18|  60.9k|      for (Course *course : enrollment.second) {
   19|  60.9k|        delete course;
   20|  60.9k|      }
   21|  18.9k|    }
   22|    137|    delete pair.second;
   23|    137|  }
   24|       |
   25|     79|  for (Course *course : Courses) {
   26|     79|    delete course;
   27|     79|  }
   28|      3|}
   29|       |
   30|       |/* Read the student list for current active university
   31|       | return true if file successfully read*/
   32|      1|bool University::readStudentList(const string &filename) {
   33|      1|  ifstream loadFile;
   34|      1|  loadFile.open(filename);
   35|       |
   36|      1|  if (!loadFile.is_open()) {
   37|      0|    cerr << "The file " << filename << "  can not be opend!" << endl;
   38|      0|    return false;
   39|      0|  }
   40|       |
   41|      1|  string line;
   42|    151|  while (getline(loadFile, line)) {
   43|    150|    int stuID;
   44|    150|    string firstName;
   45|    150|    string lastName;
   46|       |
   47|    150|    stringstream studentData(line);
   48|    150|    studentData >> stuID >> firstName >> lastName;
   49|    150|    if (uniStudents.find(stuID) == uniStudents.end()) {
   50|    137|      uniStudents[stuID] = new Student(stuID, lastName, firstName);
   51|    137|    }
   52|    150|  }
   53|      1|  loadFile.close();
   54|      1|  return true;
   55|      1|}
   56|       |
   57|       |/* Read the course list for current active university
   58|       | return true if file successfully read*/
   59|      1|bool University::readCourseList(const string &filename) {
   60|      1|  ifstream loadFile;
   61|      1|  loadFile.open(filename);
   62|       |
   63|      1|  if (!loadFile.is_open()) {
   64|      0|    cerr << "The file " << filename << "  is not open";
   65|      0|    return false;
   66|      0|  }
   67|       |
   68|      1|  string line;
   69|       |
   70|     80|  while (getline(loadFile, line)) {
   71|     79|    string shortName;
   72|     79|    string longName = "";
   73|       |
   74|     79|    stringstream ssLine(line);
   75|     79|    ssLine >> shortName;
   76|     79|    string val;
   77|     79|    ssLine >> val;
   78|     79|    longName += val;
   79|       |
   80|    303|    while (ssLine >> val) {
   81|    224|      longName += " ";
   82|    224|      longName += val;
   83|    224|    }
   84|     79|    Courses.push_back(new Course(shortName, longName));
   85|     79|  }
   86|       |
   87|      1|  loadFile.close();
   88|      1|  return true;
   89|      1|}
   90|       |
   91|       |/* Read the student enrollment information for current active university
   92|       | return true if file successfully read*/
   93|      1|bool University::readEnrollmentInfo(const string &filename) {
   94|      1|  ifstream loadFile;
   95|      1|  loadFile.open(filename);
   96|       |
   97|      1|  if (!loadFile.is_open()) {
   98|      0|    cerr << "This file " << filename << " is not opened." << endl;
   99|      0|    return false;
  100|      0|  }
  101|       |
  102|      1|  string line;
  103|    451|  while (getline(loadFile, line)) {
  104|    450|    int stuID;
  105|    450|    string shortName;
  106|       |
  107|    450|    stringstream ssLine(line);
  108|    450|    ssLine >> stuID >> shortName;
  109|       |
  110|  61.6k|    for (const auto &pair : uniStudents) {
  111|  61.6k|      if (pair.second->addCourse(stuID, shortName)) {
  112|  4.81M|        for (Course *val : Courses) {
  113|  4.81M|          if (pair.second->studentID == stuID) {
  114|  34.9k|            val->students[shortName].push_back(pair.second);
  115|  34.9k|          }
  116|  4.81M|        }
  117|  60.9k|      }
  118|  61.6k|    }
  119|    450|  }
  120|       |
  121|      1|  loadFile.close();
  122|      1|  return true;
  123|      1|}
  124|       |
  125|       |/* Drop student from given course, return true if successful*/
  126|      1|bool University::dropCourse(int studentID, const string &courseNumber) {
  127|      1|  bool ans = false;
  128|    137|  for (const auto &pair : uniStudents) {
  129|    411|    for (int i = 0; i < pair.second->enrollmentInfo[studentID].size(); i++) {
  130|    411|      if (pair.second->enrollmentInfo[studentID][i]->courseID == courseNumber) {
  131|    274|        for (int j = i; j < pair.second->enrollmentInfo[studentID].size() - 1;
  132|    137|             j++) {
  133|    137|          pair.second->enrollmentInfo[studentID][j] =
  134|    137|              pair.second->enrollmentInfo[studentID][j + 1];
  135|    137|        }
  136|    137|        pair.second->enrollmentInfo[studentID].pop_back();
  137|    137|        ans = true;
  138|    137|        break;
  139|    137|      }
  140|    411|    }
  141|    137|  }
  142|       |
  143|      1|  return ans;
  144|      1|}
  145|       |
  146|       |/*This is used to add a student to a course*/
  147|      3|bool University::addCourse(int studentID, const string &courseNumber) {
  148|      3|  bool ans = false;
  149|    411|  for (const auto &pair : uniStudents) {
  150|    411|    if (pair.second->addCourse(studentID, courseNumber)) {
  151|    137|      ans = true;
  152|  10.8k|      for (Course *val : Courses) {
  153|  10.8k|        if (pair.second->studentID == studentID) {
  154|     79|          val->students[courseNumber].push_back(pair.second);
  155|     79|        }
  156|  10.8k|      }
  157|    137|    }
  158|    411|  }
  159|      3|  return ans;
  160|      3|}
  161|       |
  162|       |/* Return true if student is in the given course*/
  163|      1|bool University::isInCourse(int studentID, const string &courseNumber) const {
  164|     10|  for (const auto &pair : uniStudents) {
  165|     10|    if (pair.second->studentID == studentID) {
  166|      1|      return pair.second->isInCourse(studentID, courseNumber);
  167|      1|    }
  168|     10|  }
  169|      0|  return false;
  170|      1|}
  171|       |
  172|       |/* Return the courses student is enrolled in
  173|       |The returned courses are separated by commas and sorted by course name*/
  174|      1|string University::getEnrolledCourses(int studentID) const {
  175|      1|  string ans = "[";
  176|      1|  Student *value;
  177|    137|  for (const auto pair : uniStudents) {
  178|    137|    value = pair.second;
  179|    137|  }
  180|      1|  ans = ans + value->enrollmentInfo[studentID][0]->courseID;
  181|      3|  for (int i = 1; i < value->enrollmentInfo[studentID].size(); i++) {
  182|      2|    ans += ", ";
  183|      2|    ans += value->enrollmentInfo[studentID][i]->courseID;
  184|      2|  }
  185|      1|  ans += "]";
  186|      1|  return ans;
  187|      1|}
  188|       |
  189|       |/*Return class list sorted by last name of students*/
  190|      1|string University::getClassListByLastName(const string &courseNumber) {
  191|      1|  string answer;
  192|     79|  for (Course *val : Courses) {
  193|     79|    answer = val->getClassListByLastName(courseNumber);
  194|     79|  }
  195|      1|  return answer;
  196|      1|}
  197|       |/*Return class list sorted by id of students*/
  198|      1|string University::getClassListByID(const string &courseNumber) {
  199|      1|  string answer;
  200|     79|  for (Course *val : Courses) {
  201|     79|    answer = val->getClassListByID(courseNumber);
  202|     79|  }
  203|      1|  return answer;
  204|      1|}
  205|       |
  206|       |/*is a function used to create a comparator for students by lastName*/
  207|      0|bool University::cmpLastName(const Student *stu1, const Student *stu2) {
  208|      0|  bool answer;
  209|      0|  Course *val = Courses[0];
  210|      0|  answer = val->cmpLastName(stu1, stu2);
  211|      0|  return answer;
  212|      0|}
  213|       |
  214|       |/*is a function used to create a comparator for students by ID*/
  215|      0|bool University::cmpID(const Student *stu1, const Student *stu2) {
  216|      0|  bool answer;
  217|      0|  Course *val = Courses[0];
  218|      0|  answer = val->cmpID(stu1, stu2);
  219|      0|  return answer;
  220|      0|}
  221|       |
  222|       |/*Return the title for the course*/
  223|      1|string University::getCourseTitle(const string &courseNumber) {
  224|      1|  string answer;
  225|     79|  for (Course *val : Courses) {
  226|     79|    if (val->courseID == courseNumber) {
  227|      1|      answer = val->courseName;
  228|      1|    }
  229|     79|  }
  230|      1|  return answer;
  231|      1|}

Mon Jun  5 03:44:37 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
