Sun Jun  4 05:26:35 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
19537 warnings generated.
40307 warnings generated.
58684 warnings generated.
75823 warnings generated.
95390 warnings generated.
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:11:16: error: 2 adjacent parameters of 'Course' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Course::Course(const string &courseID, const string &courseName)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:11:30: note: the first parameter in the range is 'courseID'
Course::Course(const string &courseID, const string &courseName)
                             ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:11:54: note: the last parameter in the range is 'courseName'
Course::Course(const string &courseID, const string &courseName)
                                                     ^~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:33:3: error: replace loop by 'std::any_of()' [readability-use-anyofallof,-warnings-as-errors]
  for (University *val : universties) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:11:20: error: variable name 'es' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  EnrollmentSystem es;
                   ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:14:39: error: 2 adjacent parameters of 'Student' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Student::Student(const int &idNumber, const string &lastname,
                                      ^~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:14:53: note: the first parameter in the range is 'lastname'
Student::Student(const int &idNumber, const string &lastname,
                                                    ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:15:32: note: the last parameter in the range is 'firstname'
                 const string &firstname)
                               ^~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:68:12: error: redundant string initialization [readability-redundant-string-init,-warnings-as-errors]
    string longName = "";
           ^~~~~~~~~~~~~
           longName
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:100:9: error: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    int id;
        ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:103:18: error: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    stringstream ss(line);
                 ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:118:54: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
    if (student->dropCourse(studentID, courseNumber))
                                                     ^
                                                      {
Suppressed 95381 warnings (95381 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
8 warnings treated as errors
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./course.cpp
Running clang-format on ./enrollmentsystem.cpp
Running clang-format on ./main.cpp
Running clang-format on ./student.cpp
Running clang-format on ./university.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==7314== Memcheck, a memory error detector
==7314== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==7314== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==7314== Command: ./a.out
==7314== Parent PID: 7035
==7314== 
==7314== 
==7314== HEAP SUMMARY:
==7314==     in use at exit: 0 bytes in 0 blocks
==7314==   total heap usage: 152,616 allocs, 152,616 frees, 10,634,422 bytes allocated
==7314== 
==7314== All heap blocks were freed -- no leaks are possible
==7314== 
==7314== For lists of detected and suppressed errors, rerun with: -s
==7314== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                 1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::addStudent(Student*)                                                                                                                                                                           1       1   0.00%         3       3   0.00%         0       0   0.00%
Course::removeStudent(Student*)                                                                                                                                                                        9       9   0.00%        11      11   0.00%         6       6   0.00%
Course::cmpLastName(Student const*, Student const*)                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Course::cmpID(Student const*, Student const*)                                                                                                                                                          1       1   0.00%         3       3   0.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                 14      12  14.29%        22      20   9.09%         6       6   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EnrollmentSystem::~EnrollmentSystem()                                                                                                                                                                  2       0 100.00%         5       0 100.00%         2       0 100.00%
EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                5       0 100.00%         9       0 100.00%         4       0 100.00%
EnrollmentSystem::setCurrentUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                         5       0 100.00%         9       0 100.00%         4       0 100.00%
EnrollmentSystem::getUniversityName[abi:cxx11]() const                                                                                                                                                 1       0 100.00%         3       0 100.00%         0       0   0.00%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int)                                                                                                                                                   1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                              1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                           1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                              1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                        1       0 100.00%         5       0 100.00%         0       0   0.00%
EnrollmentSystem::cmpLastName(Student const*, Student const*)                                                                                                                                          1       1   0.00%         3       3   0.00%         0       0   0.00%
EnrollmentSystem::cmpID(Student const*, Student const*)                                                                                                                                                1       1   0.00%         3       3   0.00%         0       0   0.00%
EnrollmentSystem::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                 23       2  91.30%        72       6  91.67%        10       0 100.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test1()                                                                                                                                                                                                1       0 100.00%        21      16  23.81%         0       0   0.00%
main                                                                                                                                                                                                   1       0 100.00%         4       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                  2       0 100.00%        25      16  36.00%         0       0   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, Student const&)                                                                                                                                                                            1       1   0.00%         5       5   0.00%         0       0   0.00%
Student::Student(int const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                     9       1  88.89%        13       1  92.31%         6       2  66.67%
Student::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                      8       0 100.00%         8       0 100.00%         6       0 100.00%
Student::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                               7       0 100.00%        11       0 100.00%         6       0 100.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               26       2  92.31%        38       6  84.21%        18       2  88.89%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
University::University(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
University::~University()                                                                                                                                                                                            5       0 100.00%        13       0 100.00%         8       0 100.00%
University::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                  6       1  83.33%        19       3  84.21%         4       1  75.00%
University::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   8       1  87.50%        25       3  88.00%         6       1  83.33%
University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                               7       1  85.71%        20       3  85.00%         6       1  83.33%
University::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                  5       1  80.00%         7       1  85.71%         4       2  50.00%
University::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   4       0 100.00%         9       0 100.00%         4       0 100.00%
University::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                            5       1  80.00%         8       1  87.50%         4       1  75.00%
University::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                                                 4       0 100.00%        11       0 100.00%         2       0 100.00%
University::cmpLastName(Student const*, Student const*)                                                                                                                                                              1       1   0.00%         3       3   0.00%         0       0   0.00%
University::cmpID(Student const*, Student const*)                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
University::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   4       0 100.00%         9       0 100.00%         4       0 100.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               51       7  86.27%       128      17  86.72%        42       6  85.71%
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:
    1|       |#include "course.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|  66.9k|Course::Course(const string &courseID) : courseID(courseID) {}
   10|       |
   11|       |Course::Course(const string &courseID, const string &courseName)
   12|     79|    : courseID(courseID), courseName(courseName) {}
   13|       |
   14|      0|void Course::addStudent(Student *student) {
   15|      0|  students[courseID].push_back(student);
   16|      0|}
   17|       |
   18|      0|void Course::removeStudent(Student *student) {
   19|      0|  for (int i = 0; i < students[courseID].size(); i++) {
   20|      0|    if (students[courseID][i] == student) {
   21|      0|      for (int j = i; j < students[courseID].size() - 1; j++) {
   22|      0|        students[courseID][j] = students[courseID][j + 1];
   23|      0|      }
   24|      0|      students[courseID].pop_back();
   25|      0|      break;
   26|      0|    }
   27|      0|  }
   28|      0|}
   29|       |
   30|       |// // Return class list sorted by last name of students
   31|       |// string getClassListByLastName(const string &courseNumber) const {
   32|       |
   33|       |//   return "abc";
   34|       |// }
   35|       |
   36|       |// // Return class list sorted by id of students
   37|       |// string getClassListByID(const string &courseNumber) const {}
   38|       |
   39|      0|bool Course::cmpLastName(const Student *stu1, const Student *stu2) {
   40|      0|  return (stu1->studentLastName > stu2->studentLastName);
   41|      0|}
   42|       |
   43|      0|bool Course::cmpID(const Student *stu1, const Student *stu2) {
   44|      0|  return (stu1->studentID < stu2->studentID);
   45|      0|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include "university.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <fstream>
    7|       |#include <iostream>
    8|       |#include <map>
    9|       |#include <sstream>
   10|       |#include <vector>
   11|       |
   12|       |using namespace std;
   13|       |
   14|      1|EnrollmentSystem::~EnrollmentSystem() {
   15|      3|  for (University *university : universties) {
   16|      3|    delete university;
   17|      3|  }
   18|      1|}
   19|       |
   20|       |// Add university to the enrollments system
   21|      4|bool EnrollmentSystem::addUniversity(const string &name) {
   22|      4|  for (University *val : universties) {
   23|      4|    if (val->universityName == name) {
   24|      1|      return false;
   25|      1|    }
   26|      4|  }
   27|      3|  universties.push_back(new University(name));
   28|      3|  return true;
   29|      4|}
   30|       |
   31|       |// Set this university as the active university for other functions
   32|      2|bool EnrollmentSystem::setCurrentUniversity(const string &name) {
   33|      4|  for (University *val : universties) {
   34|      4|    if (val->universityName == name) {
   35|      1|      currentUniversity = val;
   36|      1|      return true;
   37|      1|    }
   38|      4|  }
   39|      1|  return false;
   40|      2|}
   41|       |
   42|       |// Return the current active university name
   43|      1|string EnrollmentSystem::getUniversityName() const {
   44|      1|  return currentUniversity->universityName;
   45|      1|}
   46|       |
   47|       |// Return the courses student is enrolled in
   48|       |// The returned courses are separated by commas and sorted by course name
   49|      1|string EnrollmentSystem::getEnrolledCourses(int studentID) {
   50|      1|  University *answer = universties[0];
   51|      1|  string value = answer->getEnrolledCourses(studentID);
   52|      1|  return value;
   53|      1|}
   54|       |
   55|       |// Read the student list for current active university
   56|       |// return true if file successfully read
   57|      1|bool EnrollmentSystem::readStudentList(const string &filename) {
   58|      1|  University *answer = universties[0];
   59|      1|  bool value = answer->readStudentList(filename);
   60|      1|  return value;
   61|      1|}
   62|       |
   63|       |// Read the course list for current active university
   64|       |// return true if file successfully read
   65|      1|bool EnrollmentSystem::readCourseList(const string &filename) {
   66|      1|  University *answer = universties[0];
   67|      1|  bool value = answer->readCourseList(filename);
   68|      1|  return value;
   69|      1|}
   70|       |
   71|       |// Read the student enrollment information for current active university
   72|       |// return true if file successfully read
   73|      1|bool EnrollmentSystem::readEnrollmentInfo(const string &filename) {
   74|      1|  University *answer = universties[0];
   75|      1|  bool value = answer->readEnrollmentInfo(filename);
   76|      1|  return value;
   77|      1|}
   78|       |
   79|       |// Drop student from given course, return true if successful
   80|      1|bool EnrollmentSystem::dropCourse(int studentID, const string &courseNumber) {
   81|      1|  University *answer = universties[0];
   82|      1|  bool value = answer->dropCourse(studentID, courseNumber);
   83|      1|  return value;
   84|      1|}
   85|       |
   86|      3|bool EnrollmentSystem::addCourse(int studentID, const string &courseNumber) {
   87|      3|  University *answer = universties[0];
   88|      3|  bool value = answer->addCourse(studentID, courseNumber);
   89|      3|  return value;
   90|      3|}
   91|       |
   92|       |// Return true if student is in the given course
   93|       |bool EnrollmentSystem::isInCourse(int studentID,
   94|      1|                                  const string &courseNumber) const {
   95|      1|  University *answer = universties[0];
   96|      1|  bool value = answer->isInCourse(studentID, courseNumber);
   97|      1|  return value;
   98|      1|}
   99|       |
  100|       |// string
  101|       |// EnrollmentSystem::getClassListByLastName(const string &courseNumber) const {
  102|       |//   vector<Student *> classList =
  103|       |//   courses[courseNumber]->getClassListByLastName(); sort(classList.begin(),
  104|       |//   classList.end(), cmpLastName);
  105|       |//   // Format the class list into a string separated by commas
  106|       |//   string result;
  107|       |//   for (const auto student : classList) {
  108|       |//     result += student->getFullName() + ", ";
  109|       |//   }
  110|       |//   // Remove the trailing comma and space
  111|       |//   if (!result.empty()) {
  112|       |//     result = result.substr(0, result.length() - 2);
  113|       |//   }
  114|       |//   return result;
  115|       |// }
  116|       |
  117|       |// string EnrollmentSystem::getClassListByID(const string &courseNumber) const {
  118|       |//   vector<Student *> classList = stu;
  119|       |//   sort(classList.begin(), classList.end(), cmpID);
  120|       |//   // Format the class list into a string separated by commas
  121|       |//   string result;
  122|       |//   for (const auto student : classList) {
  123|       |//     result += student->studentLastName + ", ";
  124|       |//   }
  125|       |//   // Remove the trailing comma and space
  126|       |//   if (!result.empty()) {
  127|       |//     result = result.substr(0, result.length() - 2);
  128|       |//   }
  129|       |//   return result;
  130|       |// }
  131|       |
  132|      0|bool EnrollmentSystem::cmpLastName(const Student *stu1, const Student *stu2) {
  133|      0|  return (stu1->studentLastName < stu2->studentLastName);
  134|      0|}
  135|       |
  136|      0|bool EnrollmentSystem::cmpID(const Student *stu1, const Student *stu2) {
  137|      0|  return (stu1->studentID < stu2->studentID);
  138|      0|}
  139|       |
  140|       |// Return the title for the course
  141|      1|string EnrollmentSystem::getCourseTitle(const string &courseNumber) {
  142|      1|  University *answer = universties[0];
  143|      1|  string value = answer->getCourseTitle(courseNumber);
  144|      1|  return value;
  145|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:
    1|       |
    2|       |#include "enrollmentsystem.h"
    3|       |#include <cassert>
    4|       |#include <iostream>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// check enrollment system
   10|      1|void test1() {
   11|      1|  EnrollmentSystem es;
   12|      1|  assert(es.addUniversity("UWB"));
   13|      0|  assert(!es.addUniversity("UWB"));
   14|      0|  assert(es.addUniversity("UW Seattle"));
   15|      0|  assert(es.addUniversity("UW Tacoma"));
   16|      0|  assert(!es.setCurrentUniversity("UWx"));
   17|      0|  assert(es.setCurrentUniversity("UWB"));
   18|      0|  assert(es.getUniversityName() == "UWB");
   19|       |  // // read data
   20|      0|  assert(es.readCourseList("data-courses.txt"));
   21|      0|  assert(es.readStudentList("data-students.txt"));
   22|      0|  assert(es.readEnrollmentInfo("data-enrollments.txt"));
   23|       |  // // check courses
   24|      0|  assert(!es.addCourse(999, "CSS342"));
   25|      0|  assert(!es.addCourse(1070, "CSS3422"));
   26|      0|  assert(!es.isInCourse(1070, "CSS342"));
   27|       |
   28|      0|  assert(es.addCourse(1070, "CSS342"));
   29|      0|  assert(es.dropCourse(1070, "CSS343"));
   30|      0|  assert(es.getCourseTitle("CSS342") ==
   31|      1|         "Data Structures, Algorithms, and Discrete Mathematics I");
   32|       |  // // check enrollments
   33|      0|  assert(es.getEnrolledCourses(1070) == "[CSS110, CSS173, CSS342]");
   34|       |  // string c342byLastName =
   35|       |  //     "[Collins, Cassandra (1070), Evans, Juan (1401), Gonzalez, Holly
   36|       |  //     (1223), " "Henderson, Daniel (1364), Taylor, Alexander (1986),Thompson,
   37|       |  //     Christine "
   38|       |  //     "(1386), Watson, Alex (1211)]";
   39|       |  // assert(es.getClassListByLastName("CSS342") == c342byLastName);
   40|       |  //  string c342byID =
   41|       |  //      "[Collins, Cassandra (1070), Watson, Alex (1211), Gonzalez, Holly "
   42|       |  //      "(1223), Henderson, Daniel (1364), Thompson, Christine (1386), Evans,
   43|       |  //      " "Juan (1401), Taylor, Alexander (1986)]";
   44|       |  //  assert(es.getClassListByID("CSS342") == c342byID);
   45|      1|}
   46|       |
   47|       |// run all tests
   48|      1|int main() {
   49|      1|  test1();
   50|       |
   51|      1|  cout << "Done." << endl;
   52|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:
    1|       |#include "student.h"
    2|       |#include "course.h"
    3|       |
    4|       |#include <sstream>
    5|       |
    6|       |using namespace std;
    7|       |
    8|      0|ostream &operator<<(ostream &out, const Student &student) {
    9|      0|  out << student.studentLastName << ", " << student.studentfirstName << " ("
   10|      0|      << student.studentID << ")";
   11|      0|  return out;
   12|      0|}
   13|       |
   14|       |Student::Student(const int &idNumber, const string &lastname,
   15|       |                 const string &firstname)
   16|       |    : studentLastName(lastname), studentfirstName(firstname),
   17|    150|      studentID(idNumber) {}
   18|       |
   19|       |// Drop student from given course, return true if successful
   20|      1|bool Student::dropCourse(int studentID, const string &courseNumber) {
   21|      1|  if (enrollmentInfo.find(studentID) != enrollmentInfo.end()) {
   22|      1|    vector<Course *> &courses = enrollmentInfo[studentID];
   23|       |
   24|      3|    for (auto it = courses.begin(); it != courses.end(); ++it) {
   25|      3|      if ((*it)->courseID == courseNumber) {
   26|      1|        delete *it;
   27|      1|        courses.erase(it);
   28|      1|        return true;
   29|      1|      }
   30|      3|    }
   31|      1|  }
   32|       |
   33|      0|  return false;
   34|      1|}
   35|       |
   36|  67.9k|bool Student::addCourse(int studentID, const string &courseNumber) {
   37|  67.9k|  if (Student::isInCourse(studentID, courseNumber) ||
   38|  67.9k|      ((studentID / 1000) == 0) || (courseNumber.length() != 6)) {
   39|  1.05k|    return false;
   40|  1.05k|  }
   41|  66.9k|  enrollmentInfo[studentID].push_back(new Course(courseNumber));
   42|  66.9k|  return true;
   43|  67.9k|}
   44|       |
   45|       |// Return true if student is in the given course
   46|  67.9k|bool Student::isInCourse(int studentID, const string &courseNumber) const {
   47|  67.9k|  const auto &enrolledCourses = enrollmentInfo.find(studentID);
   48|  67.9k|  if (enrolledCourses != enrollmentInfo.end()) {
   49|  84.7k|    for (const auto &course : enrolledCourses->second) {
   50|  84.7k|      if (course->courseID == courseNumber) {
   51|    750|        return true;
   52|    750|      }
   53|  84.7k|    }
   54|  47.1k|  }
   55|  67.2k|  return false;
   56|  67.9k|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:
    1|       |#include "university.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <fstream>
    6|       |#include <iostream>
    7|       |#include <sstream>
    8|       |
    9|       |using namespace std;
   10|       |
   11|      3|University::University(const string &name) : universityName(name) {}
   12|       |
   13|      3|University::~University() {
   14|    150|  for (Student *student : uniStudents) {
   15|  20.7k|    for (auto &enrollment : student->enrollmentInfo) {
   16|  66.8k|      for (Course *course : enrollment.second) {
   17|  66.8k|        delete course;
   18|  66.8k|      }
   19|  20.7k|    }
   20|    150|    delete student;
   21|    150|  }
   22|       |
   23|     79|  for (Course *course : Courses) {
   24|     79|    delete course;
   25|     79|  }
   26|      3|}
   27|       |
   28|       |// Read the student list for current active university
   29|       |// return true if file successfully read
   30|      1|bool University::readStudentList(const string &filename) {
   31|      1|  ifstream loadFile;
   32|      1|  loadFile.open(filename);
   33|       |
   34|      1|  if (!loadFile.is_open()) {
   35|      0|    cerr << "The file " << filename << "  can not be opend!" << endl;
   36|      0|    return false;
   37|      0|  }
   38|       |
   39|      1|  string line;
   40|    151|  while (getline(loadFile, line)) {
   41|    150|    int stuID;
   42|    150|    string firstName;
   43|    150|    string lastName;
   44|       |
   45|    150|    stringstream studentData(line);
   46|    150|    studentData >> stuID >> firstName >> lastName;
   47|    150|    uniStudents.push_back(new Student(stuID, lastName, firstName));
   48|    150|  }
   49|      1|  loadFile.close();
   50|      1|  return true;
   51|      1|}
   52|       |
   53|       |// Read the course list for current active university
   54|       |// return true if file successfully read
   55|      1|bool University::readCourseList(const string &filename) {
   56|      1|  ifstream loadFile;
   57|      1|  loadFile.open(filename);
   58|       |
   59|      1|  if (!loadFile.is_open()) {
   60|      0|    cerr << "The file " << filename << "  is not open";
   61|      0|    return false;
   62|      0|  }
   63|       |
   64|      1|  string line;
   65|       |
   66|     80|  while (getline(loadFile, line)) {
   67|     79|    string shortName;
   68|     79|    string longName = "";
   69|       |
   70|     79|    stringstream ssLine(line);
   71|     79|    ssLine >> shortName;
   72|     79|    string val;
   73|     79|    ssLine >> val;
   74|     79|    longName += val;
   75|       |
   76|    303|    while (ssLine >> val) {
   77|    224|      longName += " ";
   78|    224|      longName += val;
   79|    224|    }
   80|     79|    Courses.push_back(new Course(shortName, longName));
   81|     79|  }
   82|       |
   83|      1|  loadFile.close();
   84|      1|  return true;
   85|      1|}
   86|       |
   87|       |// Read the student enrollment information for current active university
   88|       |// return true if file successfully read
   89|      1|bool University::readEnrollmentInfo(const string &filename) {
   90|      1|  ifstream loadFile;
   91|      1|  loadFile.open(filename);
   92|       |
   93|      1|  if (!loadFile.is_open()) {
   94|      0|    cerr << "This file " << filename << " is not opened." << endl;
   95|      0|    return false;
   96|      0|  }
   97|       |
   98|      1|  string line;
   99|    451|  while (getline(loadFile, line)) {
  100|    450|    int id;
  101|    450|    string shortName;
  102|       |
  103|    450|    stringstream ss(line);
  104|    450|    ss >> id >> shortName;
  105|       |
  106|  67.5k|    for (Student *value : uniStudents) {
  107|  67.5k|      value->addCourse(id, shortName);
  108|  67.5k|    }
  109|    450|  }
  110|       |
  111|      1|  loadFile.close();
  112|      1|  return true;
  113|      1|}
  114|       |
  115|       |// Drop student from given course, return true if successful
  116|      1|bool University::dropCourse(int studentID, const string &courseNumber) {
  117|      1|  for (Student *student : uniStudents) {
  118|      1|    if (student->dropCourse(studentID, courseNumber))
  119|      1|      return true;
  120|      1|  }
  121|      0|  return false;
  122|      1|}
  123|       |
  124|      3|bool University::addCourse(int studentID, const string &courseNumber) {
  125|      3|  bool ans = false;
  126|    450|  for (Student *student : uniStudents) {
  127|    450|    if (student->addCourse(studentID, courseNumber)) {
  128|    150|      ans = true;
  129|    150|    }
  130|    450|  }
  131|      3|  return ans;
  132|      3|}
  133|       |
  134|       |// Return true if student is in the given course
  135|      1|bool University::isInCourse(int studentID, const string &courseNumber) const {
  136|    128|  for (const Student *student : uniStudents) {
  137|    128|    if (student->studentID == studentID) {
  138|      1|      return student->isInCourse(studentID, courseNumber);
  139|      1|    }
  140|    128|  }
  141|      0|  return false;
  142|      1|}
  143|       |
  144|       |// Return the courses student is enrolled in
  145|       |// The returned courses are separated by commas and sorted by course name
  146|      1|string University::getEnrolledCourses(int studentID) const {
  147|      1|  string ans = "[";
  148|      1|  Student *value = uniStudents[0];
  149|      1|  ans = ans + value->enrollmentInfo[studentID][0]->courseID;
  150|      3|  for (int i = 1; i < value->enrollmentInfo[studentID].size(); i++) {
  151|      2|    ans += ", ";
  152|      2|    ans += value->enrollmentInfo[studentID][i]->courseID;
  153|      2|  }
  154|      1|  ans += "]";
  155|      1|  return ans;
  156|      1|}
  157|       |
  158|       |// vector<Student *> University::getClassListByLastName() {
  159|       |//   // sort(students.begin(), students.end(), cmpLastName);
  160|       |//   return students;
  161|       |// }
  162|       |
  163|       |// vector<Student *> University::getClassListByID() {
  164|       |//   // sort(students.begin(), students.end(), cmpID);
  165|       |//   return students;
  166|       |// }
  167|       |
  168|      0|bool University::cmpLastName(const Student *stu1, const Student *stu2) {
  169|      0|  return (stu1->studentLastName > stu2->studentLastName);
  170|      0|}
  171|       |
  172|      0|bool University::cmpID(const Student *stu1, const Student *stu2) {
  173|      0|  return (stu1->studentID > stu2->studentID);
  174|      0|}
  175|       |
  176|       |// Return the title for the course
  177|      1|string University::getCourseTitle(const string &courseNumber) {
  178|      1|  string answer;
  179|     79|  for (Course *val : Courses) {
  180|     79|    if (val->courseID == courseNumber) {
  181|      1|      answer = val->courseName;
  182|      1|    }
  183|     79|  }
  184|      1|  return answer;
  185|      1|}

Sun Jun  4 05:26:58 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
