Fri Jun  2 07:29:29 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
59127 warnings generated.
122103 warnings generated.
178276 warnings generated.
230772 warnings generated.
290097 warnings generated.
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:14:16: error: 2 adjacent parameters of 'Course' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Course::Course(const string &courseID, const string &courseName)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:14:30: note: the first parameter in the range is 'courseID'
Course::Course(const string &courseID, const string &courseName)
                             ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:14:54: note: the last parameter in the range is 'courseName'
Course::Course(const string &courseID, const string &courseName)
                                                     ^~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:14:16: error: pass by value and use std::move [modernize-pass-by-value,-warnings-as-errors]
Course::Course(const string &courseID, const string &courseName)
               ^~~~~~~~~~~~~~
               string 
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:14:40: error: pass by value and use std::move [modernize-pass-by-value,-warnings-as-errors]
Course::Course(const string &courseID, const string &courseName)
                                       ^~~~~~~~~~~~~~
                                       string 
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:17:9: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default,-warnings-as-errors]
Course::~Course() {}
        ^         ~~
                  = default;
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:25:8: error: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  auto it = student->enrollmentInfo.find(student->studentID);
       ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:43:41: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Course::cmpLastName(const Student *s1, const Student *s2) {
                                        ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:43:60: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Course::cmpLastName(const Student *s1, const Student *s2) {
                                                           ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:47:35: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Course::cmpID(const Student *s1, const Student *s2) {
                                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:47:54: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Course::cmpID(const Student *s1, const Student *s2) {
                                                     ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.h:14:7: error: class 'Course' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions,-warnings-as-errors]
class Course {
      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.h:29:35: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.h:29:54: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                                     ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.h:30:29: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                            ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.h:30:48: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                                               ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:18:5: error: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return,-warnings-as-errors]
  } else {
    ^~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:28:5: error: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return,-warnings-as-errors]
  } else {
    ^~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:46:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (int i = 1; i < enrolledCourses.size(); i++) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:46:21: error: backward branch (for loop) is ID-dependent due to variable reference to 'enrolledCourses' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
    for (int i = 1; i < enrolledCourses.size(); i++) {
                    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:67:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (getline(loadFile, line)) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:68:9: error: variable 'id' is not initialized [cppcoreguidelines-init-variables,-warnings-as-errors]
    int id;
        ^
           = 0
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:68:9: error: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:98:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    stringstream ss(line);
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:96:12: error: redundant string initialization [readability-redundant-string-init,-warnings-as-errors]
    string longName = "";
           ^~~~~~~~~~~~~
           longName
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:98:18: error: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    stringstream ss(line);
                 ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:103:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    while (ss >> val) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:103:12: error: backward branch (while loop) is ID-dependent due to variable reference to 'ss' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
    while (ss >> val) {
           ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:126:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (getline(loadFile, line)) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:127:9: error: variable 'id' is not initialized [cppcoreguidelines-init-variables,-warnings-as-errors]
    int id;
        ^
           = 0
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:127:9: error: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:130:18: error: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    stringstream ss(line);
                 ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:144:12: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
           ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:144:7: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:144:23: error: backward branch (for loop) is ID-dependent due to variable reference to 'j' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
                      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:168:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const string &course : enrolledCourses->second) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:183:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  vector<string> enrolledCourses = enrollmentInfo.at(studentID);
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:188:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 1; i < enrolledCourses.size(); i++) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:188:19: error: backward branch (for loop) is ID-dependent due to variable reference to 'enrolledCourses' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (int i = 1; i < enrolledCourses.size(); i++) {
                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:227:51: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool EnrollmentSystem::cmpLastName(const Student *s1, const Student *s2) {
                                                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:227:70: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool EnrollmentSystem::cmpLastName(const Student *s1, const Student *s2) {
                                                                     ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:231:45: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool EnrollmentSystem::cmpID(const Student *s1, const Student *s2) {
                                            ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:231:64: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool EnrollmentSystem::cmpID(const Student *s1, const Student *s2) {
                                                               ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.h:10:7: error: constructor does not initialize these fields: currentUniversity [cppcoreguidelines-pro-type-member-init,hicpp-member-init,-warnings-as-errors]
class EnrollmentSystem {
      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.h:52:35: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.h:52:54: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                                     ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.h:53:29: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                            ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.h:53:48: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                                               ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:11:20: error: variable name 'es' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  EnrollmentSystem es;
                   ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:14:39: error: 2 adjacent parameters of 'Student' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Student::Student(const int &idNumber, const string &lastname,
                                      ^~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:14:53: note: the first parameter in the range is 'lastname'
Student::Student(const int &idNumber, const string &lastname,
                                                    ^~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:15:32: note: the last parameter in the range is 'firstname'
                 const string &firstname)
                               ^~~~~~~~~
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:23:12: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
           ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:14:39: error: pass by value and use std::move [modernize-pass-by-value,-warnings-as-errors]
Student::Student(const int &idNumber, const string &lastname,
                                      ^~~~~~~~~~~~~~
                                      string 
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:15:18: error: pass by value and use std::move [modernize-pass-by-value,-warnings-as-errors]
                 const string &firstname)
                 ^~~~~~~~~~~~~~
                 string 
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:23:7: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:23:23: error: backward branch (for loop) is ID-dependent due to variable reference to 'j' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
                      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:46:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const string &course : enrolledCourses->second) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:11:24: error: pass by value and use std::move [modernize-pass-by-value,-warnings-as-errors]
University::University(const string &name) : universityName(name) {}
                       ^~~~~~~~~~~~~~
                       string                               std::move( )
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:13:13: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default,-warnings-as-errors]
University::~University() {}
            ^             ~~
                          = default;
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:27:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (getline(loadFile, line)) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:28:9: error: variable 'id' is not initialized [cppcoreguidelines-init-variables,-warnings-as-errors]
    int id;
        ^
           = 0
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:28:9: error: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:58:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    stringstream ss(line);
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:56:12: error: redundant string initialization [readability-redundant-string-init,-warnings-as-errors]
    string longName = "";
           ^~~~~~~~~~~~~
           longName
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:58:18: error: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    stringstream ss(line);
                 ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:63:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    while (ss >> val) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:63:12: error: backward branch (while loop) is ID-dependent due to variable reference to 'ss' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
    while (ss >> val) {
           ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:86:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (getline(loadFile, line)) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:87:9: error: variable 'id' is not initialized [cppcoreguidelines-init-variables,-warnings-as-errors]
    int id;
        ^
           = 0
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:87:9: error: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:90:18: error: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    stringstream ss(line);
                 ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:103:8: error: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  auto it = find(enrolledCourses.begin(), enrolledCourses.end(), courseNumber);
       ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:124:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const string &course : enrolledCourses->second) {
    ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:139:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  vector<string> enrolledCourses = enrollmentInfo.at(studentID);
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:144:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 1; i < enrolledCourses.size(); i++) {
  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:144:19: error: backward branch (for loop) is ID-dependent due to variable reference to 'enrolledCourses' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (int i = 1; i < enrolledCourses.size(); i++) {
                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:162:45: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool University::cmpLastName(const Student *s1, const Student *s2) {
                                            ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:162:64: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool University::cmpLastName(const Student *s1, const Student *s2) {
                                                               ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:166:39: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool University::cmpID(const Student *s1, const Student *s2) {
                                      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:166:58: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool University::cmpID(const Student *s1, const Student *s2) {
                                                         ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:11:7: error: class 'University' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions,-warnings-as-errors]
class University {
      ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:15:3: error: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions,-warnings-as-errors]
  University(const string &name);
  ^
  explicit 
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:40:35: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                  ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:40:54: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpLastName(const Student *s1, const Student *s2);
                                                     ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:41:29: error: parameter name 's1' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                            ^
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.h:41:48: error: parameter name 's2' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  bool cmpID(const Student *s1, const Student *s2);
                                               ^
Suppressed 289968 warnings (289968 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
77 warnings treated as errors
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./course.cpp
Running clang-format on ./enrollmentsystem.cpp
198,199c198,200
< //   vector<Student *> classList = courses[courseNumber]->getClassListByLastName();
< //   sort(classList.begin(), classList.end(), cmpLastName);
---
> //   vector<Student *> classList =
> //   courses[courseNumber]->getClassListByLastName(); sort(classList.begin(),
> //   classList.end(), cmpLastName);
Running clang-format on ./main.cpp
Running clang-format on ./student.cpp
Running clang-format on ./university.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================

=================================================================
==15943==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 19200 byte(s) in 150 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x409f7b in EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:75
    #2 0x4186ad in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:21
    #3 0x41960e in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:52
    #4 0x7f187eeddd84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Direct leak of 7584 byte(s) in 79 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x40a649 in EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:108
    #2 0x4185d4 in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:20
    #3 0x41960e in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:52
    #4 0x7f187eeddd84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Direct leak of 200 byte(s) in 1 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x409825 in EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:19
    #2 0x418253 in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:15
    #3 0x41960e in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:52
    #4 0x7f187eeddd84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Direct leak of 200 byte(s) in 1 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x409825 in EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:19
    #2 0x41817a in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:14
    #3 0x41960e in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:52
    #4 0x7f187eeddd84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Direct leak of 200 byte(s) in 1 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x409825 in EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:19
    #2 0x417fc5 in test1() /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:12
    #3 0x41960e in main /home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:52
    #4 0x7f187eeddd84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Indirect leak of 2419 byte(s) in 71 object(s) allocated from:
    #0 0x7f187fc897b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x7f187f932dfc in void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (/lib64/libstdc++.so.6+0x12fdfc)

SUMMARY: AddressSanitizer: 29803 byte(s) leaked in 303 allocation(s).
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==16002== Memcheck, a memory error detector
==16002== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==16002== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==16002== Command: ./a.out
==16002== Parent PID: 14741
==16002== 
==16002== 
==16002== HEAP SUMMARY:
==16002==     in use at exit: 29,803 bytes in 303 blocks
==16002==   total heap usage: 1,312 allocs, 1,009 frees, 195,722 bytes allocated
==16002== 
==16002== LEAK SUMMARY:
==16002==    definitely lost: 27,384 bytes in 232 blocks
==16002==    indirectly lost: 2,419 bytes in 71 blocks
==16002==      possibly lost: 0 bytes in 0 blocks
==16002==    still reachable: 0 bytes in 0 blocks
==16002==         suppressed: 0 bytes in 0 blocks
==16002== Rerun with --leak-check=full to see details of leaked memory
==16002== 
==16002== For lists of detected and suppressed errors, rerun with: -s
==16002== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, Course const&)                                                                                                                                                               1       1   0.00%         4       4   0.00%         0       0   0.00%
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::~Course()                                                                                                                                                                                      1       1   0.00%         1       1   0.00%         0       0   0.00%
Course::addStudent(Student*)                                                                                                                                                                           1       1   0.00%         3       3   0.00%         0       0   0.00%
Course::removeStudent(Student*)                                                                                                                                                                        3       3   0.00%         8       8   0.00%         2       2   0.00%
Course::cmpLastName(Student const*, Student const*)                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
Course::cmpID(Student const*, Student const*)                                                                                                                                                          1       1   0.00%         3       3   0.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                  9       8  11.11%        23      22   4.35%         2       2   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                4       0 100.00%         8       0 100.00%         2       0 100.00%
EnrollmentSystem::setCurrentUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                         4       0 100.00%         8       0 100.00%         2       0 100.00%
EnrollmentSystem::getUniversityName[abi:cxx11]() const                                                                                                                                                 1       0 100.00%         3       0 100.00%         0       0   0.00%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int)                                                                                                                                                   6       0 100.00%        13       0 100.00%         4       1  75.00%
EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                              6       1  83.33%        19       3  84.21%         4       1  75.00%
EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               8       1  87.50%        25       3  88.00%         6       1  83.33%
EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                           6       1  83.33%        18       3  83.33%         4       1  75.00%
EnrollmentSystem::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                             10       1  90.00%        12       1  91.67%         6       1  83.33%
EnrollmentSystem::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               8       0 100.00%         8       0 100.00%         6       1  83.33%
EnrollmentSystem::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                        7       1  85.71%        11       2  81.82%         6       1  83.33%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                             7       7   0.00%        15      15   0.00%         4       4   0.00%
EnrollmentSystem::cmpLastName(Student const*, Student const*)                                                                                                                                          1       1   0.00%         3       3   0.00%         0       0   0.00%
EnrollmentSystem::cmpID(Student const*, Student const*)                                                                                                                                                1       1   0.00%         3       3   0.00%         0       0   0.00%
EnrollmentSystem::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         3       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                 70      14  80.00%       149      33  77.85%        44      11  75.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp':
Name                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test1()                                                                                                                                                                                                1       0 100.00%        25      17  32.00%         0       0   0.00%
main                                                                                                                                                                                                   1       0 100.00%         4       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                  2       0 100.00%        29      17  41.38%         0       0   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, Student const&)                                                                                                                                                                            1       1   0.00%         5       5   0.00%         0       0   0.00%
Student::Student(int const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                    10      10   0.00%        12      12   0.00%         6       6   0.00%
Student::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                      8       8   0.00%         8       8   0.00%         6       6   0.00%
Student::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                               7       7   0.00%        11      11   0.00%         6       6   0.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               27      26   3.70%        37      36   2.70%        18      18   0.00%

File '/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp':
Name                                                                                                                                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
University::University(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
University::~University()                                                                                                                                                                                            1       1   0.00%         1       1   0.00%         0       0   0.00%
University::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                  6       6   0.00%        19      19   0.00%         4       4   0.00%
University::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   8       8   0.00%        25      25   0.00%         6       6   0.00%
University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                               6       6   0.00%        18      18   0.00%         4       4   0.00%
University::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                  4       4   0.00%         9       9   0.00%         2       2   0.00%
University::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   8       8   0.00%         8       8   0.00%         6       6   0.00%
University::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                            7       7   0.00%        11      11   0.00%         6       6   0.00%
University::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                                                 7       7   0.00%        15      15   0.00%         4       4   0.00%
University::getClassListByLastName()                                                                                                                                                                                 1       1   0.00%         3       3   0.00%         0       0   0.00%
University::getClassListByID()                                                                                                                                                                                       1       1   0.00%         3       3   0.00%         0       0   0.00%
University::cmpLastName(Student const*, Student const*)                                                                                                                                                              1       1   0.00%         3       3   0.00%         0       0   0.00%
University::cmpID(Student const*, Student const*)                                                                                                                                                                    1       1   0.00%         3       3   0.00%         0       0   0.00%
University::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                   1       1   0.00%         3       3   0.00%         0       0   0.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                               53      52   1.89%       122     121   0.82%        32      32   0.00%
/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/course.cpp:
    1|       |#include "course.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|      0|ostream &operator<<(ostream &out, const Course &course) {
   10|      0|  out << course.courseID << " : " << course.courseName;
   11|      0|  return out;
   12|      0|}
   13|       |
   14|       |Course::Course(const string &courseID, const string &courseName)
   15|     79|    : courseID(courseID), courseName(courseName) {}
   16|       |
   17|      0|Course::~Course() {}
   18|       |
   19|      0|void Course::addStudent(Student *student) {
   20|      0|  student->enrollmentInfo[student->studentID].push_back(courseID);
   21|      0|}
   22|       |
   23|      0|void Course::removeStudent(Student *student) {
   24|       |  // Find the student in the enrollmentInfo
   25|      0|  auto it = student->enrollmentInfo.find(student->studentID);
   26|      0|  if (it != student->enrollmentInfo.end()) {
   27|       |    // Remove the course from the student's enrollmentInfo
   28|      0|    auto &courses = it->second;
   29|      0|    courses.erase(std::remove(courses.begin(), courses.end(), courseID),
   30|      0|                  courses.end());
   31|      0|  }
   32|      0|}
   33|       |
   34|       |// // Return class list sorted by last name of students
   35|       |// string getClassListByLastName(const string &courseNumber) const {
   36|       |
   37|       |//   return "abc";
   38|       |// }
   39|       |
   40|       |// // Return class list sorted by id of students
   41|       |// string getClassListByID(const string &courseNumber) const {}
   42|       |
   43|      0|bool Course::cmpLastName(const Student *s1, const Student *s2) {
   44|      0|  return (s1->studentLastName > s2->studentLastName);
   45|      0|}
   46|       |
   47|      0|bool Course::cmpID(const Student *s1, const Student *s2) {
   48|      0|  return (s1->studentID < s2->studentID);
   49|      0|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/enrollmentsystem.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include "university.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <fstream>
    7|       |#include <iostream>
    8|       |#include <map>
    9|       |#include <sstream>
   10|       |#include <vector>
   11|       |
   12|       |using namespace std;
   13|       |
   14|       |// Add university to the enrollments system
   15|      4|bool EnrollmentSystem::addUniversity(const string &name) {
   16|      4|  if (universities[name] != nullptr) {
   17|      1|    return false;
   18|      3|  } else {
   19|      3|    universities[name] = new University(name);
   20|      3|    return true;
   21|      3|  }
   22|      4|}
   23|       |
   24|       |// Set this university as the active university for other functions
   25|      2|bool EnrollmentSystem::setCurrentUniversity(const string &name) {
   26|      2|  if (universities[name] == nullptr) {
   27|      1|    return false;
   28|      1|  } else {
   29|      1|    currentUniversity = universities[name];
   30|      1|    return true;
   31|      1|  }
   32|      2|}
   33|       |
   34|       |// Return the current active university name
   35|      1|string EnrollmentSystem::getUniversityName() const {
   36|      1|  return currentUniversity->universityName;
   37|      1|}
   38|       |
   39|       |// Return the courses student is enrolled in
   40|       |// The returned courses are separated by commas and sorted by course name
   41|      1|string EnrollmentSystem::getEnrolledCourses(int studentID) {
   42|      1|  string ans = "[";
   43|      1|  const auto &enrolledCourses = enrollmentInfo[studentID];
   44|      1|  if (!enrolledCourses.empty()) {
   45|      1|    ans += enrolledCourses[0];
   46|      3|    for (int i = 1; i < enrolledCourses.size(); i++) {
   47|      2|      ans += ", ";
   48|      2|      ans += enrolledCourses[i];
   49|      2|    }
   50|      1|  }
   51|      1|  ans += "]";
   52|      1|  return ans;
   53|      1|}
   54|       |
   55|       |// Read the student list for current active university
   56|       |// return true if file successfully read
   57|      1|bool EnrollmentSystem::readStudentList(const string &filename) {
   58|      1|  ifstream loadFile;
   59|      1|  loadFile.open(filename);
   60|       |
   61|      1|  if (!loadFile.is_open()) {
   62|      0|    cerr << "The file " << filename << "  can not be opend!" << endl;
   63|      0|    return false;
   64|      0|  }
   65|       |
   66|      1|  string line;
   67|    151|  while (getline(loadFile, line)) {
   68|    150|    int id;
   69|    150|    string firstName;
   70|    150|    string lastName;
   71|       |
   72|    150|    stringstream studentData(line);
   73|    150|    studentData >> id >> firstName >> lastName;
   74|       |
   75|    150|    students.push_back(new Student(id, lastName, firstName));
   76|    150|  }
   77|       |
   78|      1|  loadFile.close();
   79|      1|  return true;
   80|      1|}
   81|       |
   82|       |// Read the course list for current active university
   83|       |// return true if file successfully read
   84|      1|bool EnrollmentSystem::readCourseList(const string &filename) {
   85|      1|  ifstream loadFile;
   86|      1|  loadFile.open(filename);
   87|       |
   88|      1|  if (!loadFile.is_open()) {
   89|      0|    cerr << "The file " << filename << "  is not open";
   90|      0|    return false;
   91|      0|  }
   92|       |
   93|      1|  string line;
   94|     80|  while (getline(loadFile, line)) {
   95|     79|    string shortName;
   96|     79|    string longName = "";
   97|       |
   98|     79|    stringstream ss(line);
   99|     79|    ss >> shortName;
  100|     79|    string val;
  101|     79|    ss >> val;
  102|     79|    longName += val;
  103|    303|    while (ss >> val) {
  104|    224|      longName += " ";
  105|    224|      longName += val;
  106|    224|    }
  107|       |
  108|     79|    courses[shortName] = new Course(shortName, longName);
  109|     79|  }
  110|      1|  loadFile.close();
  111|      1|  return true;
  112|      1|}
  113|       |
  114|       |// Read the student enrollment information for current active university
  115|       |// return true if file successfully read
  116|      1|bool EnrollmentSystem::readEnrollmentInfo(const string &filename) {
  117|      1|  ifstream loadFile;
  118|      1|  loadFile.open(filename);
  119|       |
  120|      1|  if (!loadFile.is_open()) {
  121|      0|    cerr << "This file " << filename << " is not opened." << endl;
  122|      0|    return false;
  123|      0|  }
  124|       |
  125|      1|  string line;
  126|    451|  while (getline(loadFile, line)) {
  127|    450|    int id;
  128|    450|    string shortName;
  129|       |
  130|    450|    stringstream ss(line);
  131|    450|    ss >> id >> shortName;
  132|       |
  133|    450|    enrollmentInfo[id].push_back(shortName);
  134|    450|  }
  135|       |
  136|      1|  loadFile.close();
  137|      1|  return true;
  138|      1|}
  139|       |
  140|       |// Drop student from given course, return true if successful
  141|      1|bool EnrollmentSystem::dropCourse(int studentID, const string &courseNumber) {
  142|      3|  for (int i = 0; i < enrollmentInfo[studentID].size(); i++) {
  143|      3|    if (enrollmentInfo[studentID][i] == courseNumber) {
  144|      2|      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
  145|      1|        enrollmentInfo[studentID][j] = enrollmentInfo[studentID][j + 1];
  146|      1|      }
  147|      1|      enrollmentInfo[studentID].pop_back();
  148|      1|      return true;
  149|      1|    }
  150|      3|  }
  151|      0|  return false;
  152|      1|}
  153|       |
  154|      3|bool EnrollmentSystem::addCourse(int studentID, const string &courseNumber) {
  155|      3|  if (EnrollmentSystem::isInCourse(studentID, courseNumber) ||
  156|      3|      ((studentID / 1000) == 0) || (courseNumber.length() != 6)) {
  157|      2|    return false;
  158|      2|  }
  159|      1|  enrollmentInfo[studentID].push_back(courseNumber);
  160|      1|  return true;
  161|      3|}
  162|       |
  163|       |// Return true if student is in the given course
  164|       |bool EnrollmentSystem::isInCourse(int studentID,
  165|      4|                                  const string &courseNumber) const {
  166|      4|  const auto &enrolledCourses = enrollmentInfo.find(studentID);
  167|      4|  if (enrolledCourses != enrollmentInfo.end()) {
  168|      9|    for (const string &course : enrolledCourses->second) {
  169|      9|      if (course == courseNumber) {
  170|      0|        return true;
  171|      0|      }
  172|      9|    }
  173|      3|  }
  174|      4|  return false;
  175|      4|}
  176|       |
  177|       |// Return the courses student is enrolled in
  178|       |// The returned courses are separated by commas and sorted by course name
  179|      0|string EnrollmentSystem::getEnrolledCourses(int studentID) const {
  180|      0|  if (enrollmentInfo.find(studentID) == enrollmentInfo.end()) {
  181|      0|    return "[]";
  182|      0|  }
  183|      0|  vector<string> enrolledCourses = enrollmentInfo.at(studentID);
  184|      0|  sort(enrolledCourses.begin(), enrolledCourses.end());
  185|       |
  186|      0|  string ans = "[";
  187|      0|  ans += enrolledCourses[0];
  188|      0|  for (int i = 1; i < enrolledCourses.size(); i++) {
  189|      0|    ans += ", ";
  190|      0|    ans += enrolledCourses[i];
  191|      0|  }
  192|      0|  ans += "]";
  193|      0|  return ans;
  194|      0|}
  195|       |
  196|       |// string
  197|       |// EnrollmentSystem::getClassListByLastName(const string &courseNumber) const {
  198|       |//   vector<Student *> classList = courses[courseNumber]->getClassListByLastName();
  199|       |//   sort(classList.begin(), classList.end(), cmpLastName);
  200|       |//   // Format the class list into a string separated by commas
  201|       |//   string result;
  202|       |//   for (const auto student : classList) {
  203|       |//     result += student->getFullName() + ", ";
  204|       |//   }
  205|       |//   // Remove the trailing comma and space
  206|       |//   if (!result.empty()) {
  207|       |//     result = result.substr(0, result.length() - 2);
  208|       |//   }
  209|       |//   return result;
  210|       |// }
  211|       |
  212|       |// string EnrollmentSystem::getClassListByID(const string &courseNumber) const {
  213|       |//   vector<Student *> classList = stu;
  214|       |//   sort(classList.begin(), classList.end(), cmpID);
  215|       |//   // Format the class list into a string separated by commas
  216|       |//   string result;
  217|       |//   for (const auto student : classList) {
  218|       |//     result += student->studentLastName + ", ";
  219|       |//   }
  220|       |//   // Remove the trailing comma and space
  221|       |//   if (!result.empty()) {
  222|       |//     result = result.substr(0, result.length() - 2);
  223|       |//   }
  224|       |//   return result;
  225|       |// }
  226|       |
  227|      0|bool EnrollmentSystem::cmpLastName(const Student *s1, const Student *s2) {
  228|      0|  return (s1->studentLastName < s2->studentLastName);
  229|      0|}
  230|       |
  231|      0|bool EnrollmentSystem::cmpID(const Student *s1, const Student *s2) {
  232|      0|  return (s1->studentID < s2->studentID);
  233|      0|}
  234|       |
  235|       |// Return the title for the course
  236|      1|string EnrollmentSystem::getCourseTitle(const string &courseNumber) {
  237|      1|  return courses[courseNumber]->courseName;
  238|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/main.cpp:
    1|       |
    2|       |#include "enrollmentsystem.h"
    3|       |#include <cassert>
    4|       |#include <iostream>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// check enrollment system
   10|      1|void test1() {
   11|      1|  EnrollmentSystem es;
   12|      1|  assert(es.addUniversity("UWB"));
   13|      0|  assert(!es.addUniversity("UWB"));
   14|      0|  assert(es.addUniversity("UW Seattle"));
   15|      0|  assert(es.addUniversity("UW Tacoma"));
   16|      0|  assert(!es.setCurrentUniversity("UWx"));
   17|      0|  assert(es.setCurrentUniversity("UWB"));
   18|      0|  assert(es.getUniversityName() == "UWB");
   19|       |  // // // read data
   20|      0|  assert(es.readCourseList("data-courses.txt"));
   21|      0|  assert(es.readStudentList("data-students.txt"));
   22|      0|  assert(es.readEnrollmentInfo("data-enrollments.txt"));
   23|       |  // check courses
   24|      0|  assert(!es.addCourse(999, "CSS342"));
   25|      0|  assert(!es.addCourse(1070, "CSS3422"));
   26|      0|  assert(!es.isInCourse(1070, "CSS342"));
   27|      0|  assert(es.addCourse(1070, "CSS342"));
   28|      0|  assert(es.dropCourse(1070, "CSS343"));
   29|      0|  assert(es.getCourseTitle("CSS342") ==
   30|      1|         "Data Structures, Algorithms, and Discrete Mathematics I");
   31|       |  // // check enrollments
   32|       |
   33|      0|  assert(es.getEnrolledCourses(1070) == "[CSS110, CSS173, CSS342]");
   34|      0|  string c342byLastName =
   35|      1|      "[Collins, Cassandra (1070), Evans, Juan (1401), Gonzalez, Holly (1223), "
   36|      1|      "Henderson, Daniel (1364), Taylor, Alexander (1986),Thompson, Christine "
   37|      1|      "(1386), Watson, Alex (1211)]";
   38|       |  // stringstream outSS;
   39|       |  // outSS.str("");
   40|       |  // outSS << es.getClassListByLastName("CSS342");
   41|       |  // cout << outSS.str();
   42|       |  // assert(es.getClassListByLastName("CSS342") == c342byLastName);
   43|       |  //  string c342byID =
   44|       |  //      "[Collins, Cassandra (1070), Watson, Alex (1211), Gonzalez, Holly "
   45|       |  //      "(1223), Henderson, Daniel (1364), Thompson, Christine (1386), Evans,
   46|       |  //      " "Juan (1401), Taylor, Alexander (1986)]";
   47|       |  //  assert(es.getClassListByID("CSS342") == c342byID);
   48|      1|}
   49|       |
   50|       |// run all tests
   51|      1|int main() {
   52|      1|  test1();
   53|       |
   54|      1|  cout << "Done." << endl;
   55|      1|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/student.cpp:
    1|       |#include "student.h"
    2|       |#include "course.h"
    3|       |
    4|       |#include <sstream>
    5|       |
    6|       |using namespace std;
    7|       |
    8|      0|ostream &operator<<(ostream &out, const Student &student) {
    9|      0|  out << student.studentLastName << ", " << student.studentfirstName << " ("
   10|      0|      << student.studentID << ")";
   11|      0|  return out;
   12|      0|}
   13|       |
   14|       |Student::Student(const int &idNumber, const string &lastname,
   15|       |                 const string &firstname)
   16|       |    : studentLastName(lastname), studentfirstName(firstname),
   17|    150|      studentID(idNumber) {}
   18|       |
   19|       |// Drop student from given course, return true if successful
   20|      0|bool Student::dropCourse(int studentID, const string &courseNumber) {
   21|      0|  for (int i = 0; i < enrollmentInfo[studentID].size(); i++) {
   22|      0|    if (enrollmentInfo[studentID][i] == courseNumber) {
   23|      0|      for (int j = i; j < enrollmentInfo[studentID].size() - 1; j++) {
   24|      0|        enrollmentInfo[studentID][j] = enrollmentInfo[studentID][j + 1];
   25|      0|      }
   26|      0|      enrollmentInfo[studentID].pop_back();
   27|      0|      return true;
   28|      0|    }
   29|      0|  }
   30|      0|  return false;
   31|      0|}
   32|       |
   33|      0|bool Student::addCourse(int studentID, const string &courseNumber) {
   34|      0|  if (Student::isInCourse(studentID, courseNumber) ||
   35|      0|      ((studentID / 1000) == 0) || (courseNumber.length() != 6)) {
   36|      0|    return false;
   37|      0|  }
   38|      0|  enrollmentInfo[studentID].push_back(courseNumber);
   39|      0|  return true;
   40|      0|}
   41|       |
   42|       |// Return true if student is in the given course
   43|      0|bool Student::isInCourse(int studentID, const string &courseNumber) const {
   44|      0|  const auto &enrolledCourses = enrollmentInfo.find(studentID);
   45|      0|  if (enrolledCourses != enrollmentInfo.end()) {
   46|      0|    for (const string &course : enrolledCourses->second) {
   47|      0|      if (course == courseNumber) {
   48|      0|        return true;
   49|      0|      }
   50|      0|    }
   51|      0|  }
   52|      0|  return false;
   53|      0|}

/home/cssuwbstudent/2023win342d-p5-AdonyasKibru/university.cpp:
    1|       |#include "university.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <fstream>
    6|       |#include <iostream>
    7|       |#include <sstream>
    8|       |
    9|       |using namespace std;
   10|       |
   11|      3|University::University(const string &name) : universityName(name) {}
   12|       |
   13|      0|University::~University() {}
   14|       |
   15|       |// Read the student list for current active university
   16|       |// return true if file successfully read
   17|      0|bool University::readStudentList(const string &filename) {
   18|      0|  ifstream loadFile;
   19|      0|  loadFile.open(filename);
   20|       |
   21|      0|  if (!loadFile.is_open()) {
   22|      0|    cerr << "The file " << filename << "  can not be opend!" << endl;
   23|      0|    return false;
   24|      0|  }
   25|       |
   26|      0|  string line;
   27|      0|  while (getline(loadFile, line)) {
   28|      0|    int id;
   29|      0|    string firstName;
   30|      0|    string lastName;
   31|       |
   32|      0|    stringstream studentData(line);
   33|      0|    studentData >> id >> firstName >> lastName;
   34|       |
   35|      0|    students.push_back(new Student(id, lastName, firstName));
   36|      0|  }
   37|       |
   38|      0|  loadFile.close();
   39|      0|  return true;
   40|      0|}
   41|       |
   42|       |// Read the course list for current active university
   43|       |// return true if file successfully read
   44|      0|bool University::readCourseList(const string &filename) {
   45|      0|  ifstream loadFile;
   46|      0|  loadFile.open(filename);
   47|       |
   48|      0|  if (!loadFile.is_open()) {
   49|      0|    cerr << "The file " << filename << "  is not open";
   50|      0|    return false;
   51|      0|  }
   52|       |
   53|      0|  string line;
   54|      0|  while (getline(loadFile, line)) {
   55|      0|    string shortName;
   56|      0|    string longName = "";
   57|       |
   58|      0|    stringstream ss(line);
   59|      0|    ss >> shortName;
   60|      0|    string val;
   61|      0|    ss >> val;
   62|      0|    longName += val;
   63|      0|    while (ss >> val) {
   64|      0|      longName += " ";
   65|      0|      longName += val;
   66|      0|    }
   67|       |
   68|      0|    courses[shortName] = new Course(shortName, longName);
   69|      0|  }
   70|      0|  loadFile.close();
   71|      0|  return true;
   72|      0|}
   73|       |
   74|       |// Read the student enrollment information for current active university
   75|       |// return true if file successfully read
   76|      0|bool University::readEnrollmentInfo(const string &filename) {
   77|      0|  ifstream loadFile;
   78|      0|  loadFile.open(filename);
   79|       |
   80|      0|  if (!loadFile.is_open()) {
   81|      0|    cerr << "This file " << filename << " is not opened." << endl;
   82|      0|    return false;
   83|      0|  }
   84|       |
   85|      0|  string line;
   86|      0|  while (getline(loadFile, line)) {
   87|      0|    int id;
   88|      0|    string shortName;
   89|       |
   90|      0|    stringstream ss(line);
   91|      0|    ss >> id >> shortName;
   92|       |
   93|      0|    enrollmentInfo[id].push_back(shortName);
   94|      0|  }
   95|       |
   96|      0|  loadFile.close();
   97|      0|  return true;
   98|      0|}
   99|       |
  100|       |// Drop student from given course, return true if successful
  101|      0|bool University::dropCourse(int studentID, const string &courseNumber) {
  102|      0|  auto &enrolledCourses = enrollmentInfo[studentID];
  103|      0|  auto it = find(enrolledCourses.begin(), enrolledCourses.end(), courseNumber);
  104|      0|  if (it != enrolledCourses.end()) {
  105|      0|    enrolledCourses.erase(it);
  106|      0|    return true;
  107|      0|  }
  108|      0|  return false;
  109|      0|}
  110|       |
  111|      0|bool University::addCourse(int studentID, const string &courseNumber) {
  112|      0|  if (University::isInCourse(studentID, courseNumber) ||
  113|      0|      ((studentID / 1000) == 0) || (courseNumber.length() != 6)) {
  114|      0|    return false;
  115|      0|  }
  116|      0|  enrollmentInfo[studentID].push_back(courseNumber);
  117|      0|  return true;
  118|      0|}
  119|       |
  120|       |// Return true if student is in the given course
  121|      0|bool University::isInCourse(int studentID, const string &courseNumber) const {
  122|      0|  const auto &enrolledCourses = enrollmentInfo.find(studentID);
  123|      0|  if (enrolledCourses != enrollmentInfo.end()) {
  124|      0|    for (const string &course : enrolledCourses->second) {
  125|      0|      if (course == courseNumber) {
  126|      0|        return true;
  127|      0|      }
  128|      0|    }
  129|      0|  }
  130|      0|  return false;
  131|      0|}
  132|       |
  133|       |// Return the courses student is enrolled in
  134|       |// The returned courses are separated by commas and sorted by course name
  135|      0|string University::getEnrolledCourses(int studentID) const {
  136|      0|  if (enrollmentInfo.find(studentID) == enrollmentInfo.end()) {
  137|      0|    return "[]";
  138|      0|  }
  139|      0|  vector<string> enrolledCourses = enrollmentInfo.at(studentID);
  140|      0|  sort(enrolledCourses.begin(), enrolledCourses.end());
  141|       |
  142|      0|  string ans = "[";
  143|      0|  ans += enrolledCourses[0];
  144|      0|  for (int i = 1; i < enrolledCourses.size(); i++) {
  145|      0|    ans += ", ";
  146|      0|    ans += enrolledCourses[i];
  147|      0|  }
  148|      0|  ans += "]";
  149|      0|  return ans;
  150|      0|}
  151|       |
  152|      0|vector<Student *> University::getClassListByLastName() {
  153|       |  // sort(students.begin(), students.end(), cmpLastName);
  154|      0|  return students;
  155|      0|}
  156|       |
  157|      0|vector<Student *> University::getClassListByID() {
  158|       |  // sort(students.begin(), students.end(), cmpID);
  159|      0|  return students;
  160|      0|}
  161|       |
  162|      0|bool University::cmpLastName(const Student *s1, const Student *s2) {
  163|      0|  return (s1->studentLastName > s2->studentLastName);
  164|      0|}
  165|       |
  166|      0|bool University::cmpID(const Student *s1, const Student *s2) {
  167|      0|  return (s1->studentID > s2->studentID);
  168|      0|}
  169|       |
  170|       |// Return the title for the course
  171|      0|string University::getCourseTitle(const string &courseNumber) {
  172|      0|  return courses[courseNumber]->courseName;
  173|      0|}

Fri Jun  2 07:30:23 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
